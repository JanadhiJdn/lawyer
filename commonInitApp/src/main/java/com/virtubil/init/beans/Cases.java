package com.virtubil.init.beans;
// Generated Feb 9, 2017 11:21:33 PM by Hibernate Tools 4.3.1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Cases generated by hbm2java
 */
@Entity
@Table(name = "cases",
         catalog = "diary"
)
public class Cases implements java.io.Serializable {

    private int caseId;
    private Court court;
    private Lawyer lawyer;
    private Type type;
    private String caseNo;
    private Date date;
    private Boolean status;
    private Set<Diary> diaries = new HashSet<Diary>(0);
    private Set<Plantiff> plantiffs = new HashSet<Plantiff>(0);
    private Set<Document> documents = new HashSet<Document>(0);
    private Set<RelationCasesClient> relationCasesClients = new HashSet<RelationCasesClient>(0);
    private Set<Defendant> defendants = new HashSet<Defendant>(0);

    public Cases() {
    }

    public Cases(int caseId) {
        this.caseId = caseId;
    }

    public Cases(int caseId, Court court, Lawyer lawyer, Type type, String caseNo, Date date, Boolean status, Set<Diary> diaries, Set<Plantiff> plantiffs, Set<Document> documents, Set<RelationCasesClient> relationCasesClients, Set<Defendant> defendants) {
        this.caseId = caseId;
        this.court = court;
        this.lawyer = lawyer;
        this.type = type;
        this.caseNo = caseNo;
        this.date = date;
        this.status = status;
        this.diaries = diaries;
        this.plantiffs = plantiffs;
        this.documents = documents;
        this.relationCasesClients = relationCasesClients;
        this.defendants = defendants;
    }

    @Id

    @Column(name = "caseID", unique = true, nullable = false)
    public int getCaseId() {
        return this.caseId;
    }

    public void setCaseId(int caseId) {
        this.caseId = caseId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "courtID")
    public Court getCourt() {
        return this.court;
    }

    public void setCourt(Court court) {
        this.court = court;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "lid")
    public Lawyer getLawyer() {
        return this.lawyer;
    }

    public void setLawyer(Lawyer lawyer) {
        this.lawyer = lawyer;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "typeID")
    public Type getType() {
        return this.type;
    }

    public void setType(Type type) {
        this.type = type;
    }

    @Column(name = "caseNo", length = 50)
    public String getCaseNo() {
        return this.caseNo;
    }

    public void setCaseNo(String caseNo) {
        this.caseNo = caseNo;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "date", length = 10)
    public Date getDate() {
        return this.date;
    }

    public void setDate(Date date) {
        this.date = date;
    }

    @Column(name = "status")
    public Boolean getStatus() {
        return this.status;
    }

    public void setStatus(Boolean status) {
        this.status = status;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "cases")
    public Set<Diary> getDiaries() {
        return this.diaries;
    }

    public void setDiaries(Set<Diary> diaries) {
        this.diaries = diaries;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "cases")
    public Set<Plantiff> getPlantiffs() {
        return this.plantiffs;
    }

    public void setPlantiffs(Set<Plantiff> plantiffs) {
        this.plantiffs = plantiffs;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "cases")
    public Set<Document> getDocuments() {
        return this.documents;
    }

    public void setDocuments(Set<Document> documents) {
        this.documents = documents;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "cases")
    public Set<RelationCasesClient> getRelationCasesClients() {
        return this.relationCasesClients;
    }

    public void setRelationCasesClients(Set<RelationCasesClient> relationCasesClients) {
        this.relationCasesClients = relationCasesClients;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "cases")
    public Set<Defendant> getDefendants() {
        return this.defendants;
    }

    public void setDefendants(Set<Defendant> defendants) {
        this.defendants = defendants;
    }

}
